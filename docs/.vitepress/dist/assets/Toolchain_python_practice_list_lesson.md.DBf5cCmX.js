import{_ as a,c as o,o as t,ag as i}from"./chunks/framework.Qw_rGEbp.js";const k=JSON.parse('{"title":"题目","description":"","frontmatter":{},"headers":[],"relativePath":"Toolchain/Python/practice/list_lesson.md","filePath":"Toolchain/Python/practice/list_lesson.md"}'),e={name:"Toolchain/Python/practice/list_lesson.md"};function n(r,s,l,h,d,c){return t(),o("div",null,s[0]||(s[0]=[i(`<h1 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h1><h2 id="题目1-删除列表中所有指定元素" tabindex="-1">题目1：删除列表中所有指定元素 <a class="header-anchor" href="#题目1-删除列表中所有指定元素" aria-label="Permalink to &quot;题目1：删除列表中所有指定元素&quot;">​</a></h2><p><strong>任务</strong>：给定列表 <code>[1, 2, 3, 2, 4, 2]</code>，删除所有值为 <code>2</code> 的元素，返回新列表。<br><strong>示例输入/输出</strong>：<br> 输入：<code>[1, 2, 3, 2, 4, 2]</code> → 输出：<code>[1, 3, 4]</code></p><h2 id="题目2-合并两个列表并去重" tabindex="-1">题目2：合并两个列表并去重 <a class="header-anchor" href="#题目2-合并两个列表并去重" aria-label="Permalink to &quot;题目2：合并两个列表并去重&quot;">​</a></h2><p><strong>任务</strong>：合并 <code>list1 = [1, 2, 3]</code> 和 <code>list2 = [3, 4, 5]</code>，去除重复元素，按升序排列。<br><strong>示例输出</strong>：<code>[1, 2, 3, 4, 5]</code></p><h2 id="题目3-统计元素出现次数" tabindex="-1">题目3：统计元素出现次数 <a class="header-anchor" href="#题目3-统计元素出现次数" aria-label="Permalink to &quot;题目3：统计元素出现次数&quot;">​</a></h2><p><strong>任务</strong>：统计列表 <code>[&quot;apple&quot;, &quot;banana&quot;, &quot;apple&quot;, &quot;cherry&quot;]</code> 中每个元素的出现次数，输出字典。<br><strong>示例输出</strong>：<code>{&quot;apple&quot;: 2, &quot;banana&quot;: 1, &quot;cherry&quot;: 1}</code></p><h2 id="题目4-列表切片反转" tabindex="-1">题目4：列表切片反转 <a class="header-anchor" href="#题目4-列表切片反转" aria-label="Permalink to &quot;题目4：列表切片反转&quot;">​</a></h2><p><strong>任务</strong>：将列表 <code>[0, 1, 2, 3, 4, 5]</code> 的第 2 到第 5 个元素（索引范围 <code>[1:5]</code>）反转。<br><strong>示例输出</strong>：<code>[0, 4, 3, 2, 1, 5]</code></p><h2 id="题目5-矩阵转置-嵌套列表" tabindex="-1">题目5：矩阵转置（嵌套列表） <a class="header-anchor" href="#题目5-矩阵转置-嵌套列表" aria-label="Permalink to &quot;题目5：矩阵转置（嵌套列表）&quot;">​</a></h2><p><strong>任务</strong>：将二维列表 <code>[[1, 2, 3], [4, 5, 6], [7, 8, 9]]</code> 转置，行变列。<br><strong>示例输出</strong>：<code>[[1, 4, 7], [2, 5, 8], [3, 6, 9]]</code></p><h2 id="题目6-列表元素分组" tabindex="-1">题目6：列表元素分组 <a class="header-anchor" href="#题目6-列表元素分组" aria-label="Permalink to &quot;题目6：列表元素分组&quot;">​</a></h2><p><strong>任务</strong>：将列表 <code>[1, 2, 3, 4, 5, 6]</code> 按每组 2 个元素分组，不足的单独成组。<br><strong>示例输出</strong>：<code>[[1, 2], [3, 4], [5, 6]]</code><br><strong>扩展</strong>：若输入 <code>[1, 2, 3, 4, 5]</code>，输出 <code>[[1, 2], [3, 4], [5]]</code></p><h2 id="题目7-查找列表最大差值" tabindex="-1">题目7：查找列表最大差值 <a class="header-anchor" href="#题目7-查找列表最大差值" aria-label="Permalink to &quot;题目7：查找列表最大差值&quot;">​</a></h2><p><strong>任务</strong>：给定数字列表 <code>[7, 1, 5, 3, 6, 4]</code>，找到两个元素的差值（后减前）的最大值。<br><strong>示例输出</strong>：<code>5</code>（由 <code>6-1=5</code>）</p><h2 id="题目8-列表元素交替合并" tabindex="-1">题目8：列表元素交替合并 <a class="header-anchor" href="#题目8-列表元素交替合并" aria-label="Permalink to &quot;题目8：列表元素交替合并&quot;">​</a></h2><p><strong>任务</strong>：将两个列表 <code>list1 = [1, 3, 5]</code> 和 <code>list2 = [2, 4, 6]</code> 交替合并。<br><strong>示例输出</strong>：<code>[1, 2, 3, 4, 5, 6]</code></p><h2 id="题目9-学生成绩筛选" tabindex="-1">题目9：学生成绩筛选 <a class="header-anchor" href="#题目9-学生成绩筛选" aria-label="Permalink to &quot;题目9：学生成绩筛选&quot;">​</a></h2><p><strong>任务</strong>：给定学生数据列表：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">students </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">72</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Charlie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;score&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p>筛选出分数 ≥80 的学生名字，按分数降序排列。<br><strong>示例输出</strong>：<code>[&quot;Charlie&quot;, &quot;Alice&quot;]</code></p><h2 id="题目10-文本单词处理" tabindex="-1">题目10：文本单词处理 <a class="header-anchor" href="#题目10-文本单词处理" aria-label="Permalink to &quot;题目10：文本单词处理&quot;">​</a></h2><p><strong>任务</strong>：给定句子 <code>&quot;Hello world, Python is awesome!&quot;</code>，将其拆分为单词列表，并移除标点符号和空格。<br><strong>示例输出</strong>：<code>[&quot;Hello&quot;, &quot;world&quot;, &quot;Python&quot;, &quot;is&quot;, &quot;awesome&quot;]</code></p><h2 id="题目11-斐波那契数列生成" tabindex="-1">题目11：斐波那契数列生成 <a class="header-anchor" href="#题目11-斐波那契数列生成" aria-label="Permalink to &quot;题目11：斐波那契数列生成&quot;">​</a></h2><p><strong>任务</strong>：用列表生成斐波那契数列的前 <code>n</code> 项（如 <code>n=5</code> 输出 <code>[0, 1, 1, 2, 3]</code>）。</p><h2 id="题目12-列表去重保持顺序" tabindex="-1">题目12：列表去重保持顺序 <a class="header-anchor" href="#题目12-列表去重保持顺序" aria-label="Permalink to &quot;题目12：列表去重保持顺序&quot;">​</a></h2><p><strong>任务</strong>：去除列表 <code>[3, 2, 1, 2, 4, 3]</code> 中的重复元素，保持原有顺序。<br><strong>示例输出</strong>：<code>[3, 2, 1, 4]</code></p><h3 id="参考答案提示" tabindex="-1"><strong>参考答案提示</strong> <a class="header-anchor" href="#参考答案提示" aria-label="Permalink to &quot;**参考答案提示**&quot;">​</a></h3><ol><li><strong>遍历时修改列表</strong>：使用 <code>列表推导式</code> 或 <code>filter()</code>。</li><li><strong>合并去重</strong>：<code>list1 + list2</code> 后转集合再转列表。</li><li><strong>统计频率</strong>：用字典推导式或 <code>collections.defaultdict</code>。</li><li><strong>切片反转</strong>：<code>my_list[1:5] = my_list[1:5][::-1]</code>。</li><li><strong>矩阵转置</strong>：使用 <code>zip(*matrix)</code> 和列表推导式。</li><li><strong>分组</strong>：<code>[my_list[i:i+2] for i in range(0, len(my_list), 2)]</code>。</li><li><strong>最大差值</strong>：遍历时记录最小值，更新最大差值。</li><li><strong>交替合并</strong>：用 <code>zip</code> 和列表展开。</li></ol>`,29)]))}const g=a(e,[["render",n]]);export{k as __pageData,g as default};
