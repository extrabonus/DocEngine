import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Qw_rGEbp.js";const g=JSON.parse('{"title":"字符串","description":"","frontmatter":{},"headers":[],"relativePath":"Toolchain/python/str.md","filePath":"Toolchain/python/str.md"}'),h={name:"Toolchain/python/str.md"};function e(l,s,p,k,r,o){return t(),a("div",null,s[0]||(s[0]=[n('<h1 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-label="Permalink to &quot;字符串&quot;">​</a></h1><h2 id="大小写转换" tabindex="-1">大小写转换 <a class="header-anchor" href="#大小写转换" aria-label="Permalink to &quot;大小写转换&quot;">​</a></h2><h3 id="capitalize" tabindex="-1"><code>capitalize()</code> <a class="header-anchor" href="#capitalize" aria-label="Permalink to &quot;`capitalize()`&quot;">​</a></h3><p><strong>描述</strong>: 将字符串的首字母大写，其余字母小写。<br><strong>参数</strong>: 无<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello WORLD&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.capitalize())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Hello world</span></span></code></pre></div><hr><h3 id="lower" tabindex="-1"><code>lower()</code> <a class="header-anchor" href="#lower" aria-label="Permalink to &quot;`lower()`&quot;">​</a></h3><p><strong>描述</strong>: 将字符串全部转为小写。<br><strong>参数</strong>: 无<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HELLO World&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.lower())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: hello world</span></span></code></pre></div><hr><h3 id="upper" tabindex="-1"><code>upper()</code> <a class="header-anchor" href="#upper" aria-label="Permalink to &quot;`upper()`&quot;">​</a></h3><p><strong>描述</strong>: 将字符串全部转为大写。<br><strong>参数</strong>: 无<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello World&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.upper())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: HELLO WORLD</span></span></code></pre></div><hr><h3 id="title" tabindex="-1"><code>title()</code> <a class="header-anchor" href="#title" aria-label="Permalink to &quot;`title()`&quot;">​</a></h3><p><strong>描述</strong>: 将每个单词的首字母大写。<br><strong>参数</strong>: 无<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.title())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Hello World</span></span></code></pre></div><hr><h3 id="swapcase" tabindex="-1"><code>swapcase()</code> <a class="header-anchor" href="#swapcase" aria-label="Permalink to &quot;`swapcase()`&quot;">​</a></h3><p><strong>描述</strong>: 反转字符串中字母的大小写。<br><strong>参数</strong>: 无<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello World&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.swapcase())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: hELLO wORLD</span></span></code></pre></div><hr><h3 id="casefold" tabindex="-1"><code>casefold()</code> <a class="header-anchor" href="#casefold" aria-label="Permalink to &quot;`casefold()`&quot;">​</a></h3><p><strong>描述</strong>: 更激进的转为小写（适用于不区分大小写的比较）。<br><strong>参数</strong>: 无<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Straße&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.casefold())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: strasse</span></span></code></pre></div><hr><h2 id="查找与统计" tabindex="-1">查找与统计 <a class="header-anchor" href="#查找与统计" aria-label="Permalink to &quot;查找与统计&quot;">​</a></h2><hr><h3 id="count-sub-start-end" tabindex="-1"><code>count(sub[, start[, end]])</code> <a class="header-anchor" href="#count-sub-start-end" aria-label="Permalink to &quot;`count(sub[, start[, end]])`&quot;">​</a></h3><p><strong>描述</strong>: 统计子字符串 <code>sub</code> 出现的次数。<br><strong>参数</strong>:</p><ul><li><code>sub</code>: 要统计的子字符串</li><li><code>start</code>/<code>end</code> (可选): 搜索范围<br><strong>示例</strong>:</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;apple banana apple&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.count(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 2</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.count(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 1</span></span></code></pre></div><hr><h3 id="find-sub-start-end" tabindex="-1"><code>find(sub[, start[, end]])</code> <a class="header-anchor" href="#find-sub-start-end" aria-label="Permalink to &quot;`find(sub[, start[, end]])`&quot;">​</a></h3><p><strong>描述</strong>: 返回子字符串 <code>sub</code> 第一次出现的索引，未找到返回 <code>-1</code>。<br><strong>参数</strong>: 同 <code>count</code><br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.find(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 6</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.find(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: -1</span></span></code></pre></div><hr><h3 id="index-sub-start-end" tabindex="-1"><code>index(sub[, start[, end]])</code> <a class="header-anchor" href="#index-sub-start-end" aria-label="Permalink to &quot;`index(sub[, start[, end]])`&quot;">​</a></h3><p><strong>描述</strong>: 同 <code>find</code>，但未找到时抛出 <code>ValueError</code>。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.index(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: 6</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># s.index(&quot;python&quot;)        # 抛出 ValueError</span></span></code></pre></div><hr><h3 id="startswith-prefix-start-end" tabindex="-1"><code>startswith(prefix[, start[, end]])</code> <a class="header-anchor" href="#startswith-prefix-start-end" aria-label="Permalink to &quot;`startswith(prefix[, start[, end]])`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否以 <code>prefix</code> 开头。<br><strong>参数</strong>:</p><ul><li><code>prefix</code>: 可以是字符串或元组（多个匹配项）<br><strong>示例</strong>:</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.startswith(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.startswith((</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;he&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre></div><hr><h3 id="endswith-suffix-start-end" tabindex="-1"><code>endswith(suffix[, start[, end]])</code> <a class="header-anchor" href="#endswith-suffix-start-end" aria-label="Permalink to &quot;`endswith(suffix[, start[, end]])`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否以 <code>suffix</code> 结尾。<br><strong>参数</strong>: 同 <code>startswith</code><br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;file.txt&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.endswith(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre></div><hr><h2 id="替换与分割" tabindex="-1">替换与分割 <a class="header-anchor" href="#替换与分割" aria-label="Permalink to &quot;替换与分割&quot;">​</a></h2><hr><h3 id="replace-old-new-count" tabindex="-1"><code>replace(old, new[, count])</code> <a class="header-anchor" href="#replace-old-new-count" aria-label="Permalink to &quot;`replace(old, new[, count])`&quot;">​</a></h3><p><strong>描述</strong>: 将 <code>old</code> 替换为 <code>new</code>，可指定替换次数 <code>count</code>。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;apple apple apple&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.replace(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: orange orange apple</span></span></code></pre></div><hr><h3 id="split-sep-none-maxsplit-1" tabindex="-1"><code>split(sep=None, maxsplit=-1)</code> <a class="header-anchor" href="#split-sep-none-maxsplit-1" aria-label="Permalink to &quot;`split(sep=None, maxsplit=-1)`&quot;">​</a></h3><p><strong>描述</strong>: 按分隔符 <code>sep</code> 分割字符串，返回列表。<br><strong>参数</strong>:</p><ul><li><code>sep</code>: 分隔符，默认按空白分割</li><li><code>maxsplit</code>: 最大分割次数<br><strong>示例</strong>:</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a,b,c,d&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.split(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxsplit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [&#39;a&#39;, &#39;b&#39;, &#39;c,d&#39;]</span></span></code></pre></div><hr><h3 id="rsplit-sep-none-maxsplit-1" tabindex="-1"><code>rsplit(sep=None, maxsplit=-1)</code> <a class="header-anchor" href="#rsplit-sep-none-maxsplit-1" aria-label="Permalink to &quot;`rsplit(sep=None, maxsplit=-1)`&quot;">​</a></h3><p><strong>描述</strong>: 从右侧开始分割字符串。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a,b,c,d&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.rsplit(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">maxsplit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [&#39;a,b&#39;, &#39;c&#39;, &#39;d&#39;]</span></span></code></pre></div><hr><h3 id="splitlines-keepends" tabindex="-1"><code>splitlines([keepends])</code> <a class="header-anchor" href="#splitlines-keepends" aria-label="Permalink to &quot;`splitlines([keepends])`&quot;">​</a></h3><p><strong>描述</strong>: 按换行符分割字符串，<code>keepends</code> 为 <code>True</code> 时保留换行符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;line1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">line2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">line3&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.splitlines())       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [&#39;line1&#39;, &#39;line2&#39;, &#39;line3&#39;]</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.splitlines(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [&#39;line1\\n&#39;, &#39;line2\\r\\n&#39;, &#39;line3&#39;]</span></span></code></pre></div><hr><h3 id="partition-sep" tabindex="-1"><code>partition(sep)</code> <a class="header-anchor" href="#partition-sep" aria-label="Permalink to &quot;`partition(sep)`&quot;">​</a></h3><p><strong>描述</strong>: 将字符串分为三部分（<code>头</code>、<code>sep</code>、<code>尾</code>），返回元组。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello.world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.partition(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: (&#39;hello&#39;, &#39;.&#39;, &#39;world&#39;)</span></span></code></pre></div><hr><h3 id="rpartition-sep" tabindex="-1"><code>rpartition(sep)</code> <a class="header-anchor" href="#rpartition-sep" aria-label="Permalink to &quot;`rpartition(sep)`&quot;">​</a></h3><p><strong>描述</strong>: 从右侧开始查找分隔符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello.world.again&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.rpartition(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: (&#39;hello.world&#39;, &#39;.&#39;, &#39;again&#39;)</span></span></code></pre></div><hr><h2 id="格式化与填充" tabindex="-1">格式化与填充 <a class="header-anchor" href="#格式化与填充" aria-label="Permalink to &quot;格式化与填充&quot;">​</a></h2><hr><h3 id="join-iterable" tabindex="-1"><code>join(iterable)</code> <a class="header-anchor" href="#join-iterable" aria-label="Permalink to &quot;`join(iterable)`&quot;">​</a></h3><p><strong>描述</strong>: 将可迭代对象中的元素用字符串连接。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lst </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.join(lst))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;a-b-c&quot;</span></span></code></pre></div><hr><h3 id="format-args-kwargs" tabindex="-1"><code>format(*args, **kwargs)</code> <a class="header-anchor" href="#format-args-kwargs" aria-label="Permalink to &quot;`format(*args, **kwargs)`&quot;">​</a></h3><p><strong>描述</strong>: 格式化字符串。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 30</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, Age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(name, age))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Name: Alice, Age: 30</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, Age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{age}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 同上</span></span></code></pre></div><hr><h3 id="zfill-width" tabindex="-1"><code>zfill(width)</code> <a class="header-anchor" href="#zfill-width" aria-label="Permalink to &quot;`zfill(width)`&quot;">​</a></h3><p><strong>描述</strong>: 在字符串左侧填充 <code>0</code> 直到达到指定宽度。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;42&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.zfill(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;00042&quot;</span></span></code></pre></div><hr><h3 id="center-width-fillchar" tabindex="-1"><code>center(width[, fillchar])</code> <a class="header-anchor" href="#center-width-fillchar" aria-label="Permalink to &quot;`center(width[, fillchar])`&quot;">​</a></h3><p><strong>描述</strong>: 居中对齐字符串，用 <code>fillchar</code> 填充两侧（默认空格）。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.center(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;**hello***&quot;</span></span></code></pre></div><hr><h3 id="ljust-width-fillchar-rjust-width-fillchar" tabindex="-1"><code>ljust(width[, fillchar])</code> / <code>rjust(width[, fillchar])</code> <a class="header-anchor" href="#ljust-width-fillchar-rjust-width-fillchar" aria-label="Permalink to &quot;`ljust(width[, fillchar])` / `rjust(width[, fillchar])`&quot;">​</a></h3><p><strong>描述</strong>: 左对齐/右对齐字符串。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.ljust(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;hello-----&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.rjust(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;-----hello&quot;</span></span></code></pre></div><hr><h3 id="format-map-mapping" tabindex="-1"><code>format_map(mapping)</code> <a class="header-anchor" href="#format-map-mapping" aria-label="Permalink to &quot;`format_map(mapping)`&quot;">​</a></h3><p><strong>描述</strong>: 用字典格式化字符串。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bob&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{name}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, Age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{age}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.format_map(data))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: Name: Bob, Age: 25</span></span></code></pre></div><hr><h2 id="字符检查" tabindex="-1">字符检查 <a class="header-anchor" href="#字符检查" aria-label="Permalink to &quot;字符检查&quot;">​</a></h2><hr><h3 id="isalnum" tabindex="-1"><code>isalnum()</code> <a class="header-anchor" href="#isalnum" aria-label="Permalink to &quot;`isalnum()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否仅包含字母和数字。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isalnum())   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc 123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isalnum())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span></code></pre></div><hr><h3 id="isalpha" tabindex="-1"><code>isalpha()</code> <a class="header-anchor" href="#isalpha" aria-label="Permalink to &quot;`isalpha()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否仅包含字母。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isalpha())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isalpha())   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span></code></pre></div><hr><h3 id="isdigit" tabindex="-1"><code>isdigit()</code> <a class="header-anchor" href="#isdigit" aria-label="Permalink to &quot;`isdigit()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否仅包含数字。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isdigit())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isdigit())     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span></code></pre></div><hr><h3 id="isnumeric" tabindex="-1"><code>isnumeric()</code> <a class="header-anchor" href="#isnumeric" aria-label="Permalink to &quot;`isnumeric()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否仅包含数字字符（包括Unicode数字）。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;½&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isnumeric())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre></div><hr><h3 id="isspace" tabindex="-1"><code>isspace()</code> <a class="header-anchor" href="#isspace" aria-label="Permalink to &quot;`isspace()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否仅包含空白字符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;   &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isspace())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; a &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isspace())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span></code></pre></div><hr><h3 id="isidentifier" tabindex="-1"><code>isidentifier()</code> <a class="header-anchor" href="#isidentifier" aria-label="Permalink to &quot;`isidentifier()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否是有效的Python标识符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;var_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isidentifier())    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123var&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isidentifier())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span></code></pre></div><hr><h3 id="isprintable" tabindex="-1"><code>isprintable()</code> <a class="header-anchor" href="#isprintable" aria-label="Permalink to &quot;`isprintable()`&quot;">​</a></h3><p><strong>描述</strong>: 检查字符串是否全部为可打印字符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isprintable())      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: False</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isprintable())        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: True</span></span></code></pre></div><hr><h2 id="修剪与转换" tabindex="-1">修剪与转换 <a class="header-anchor" href="#修剪与转换" aria-label="Permalink to &quot;修剪与转换&quot;">​</a></h2><hr><h3 id="strip-chars" tabindex="-1"><code>strip([chars])</code> <a class="header-anchor" href="#strip-chars" aria-label="Permalink to &quot;`strip([chars])`&quot;">​</a></h3><p><strong>描述</strong>: 去除字符串两端的指定字符（默认去空格）。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;  hello  &quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.strip())            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;hello&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;**hello**&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.strip(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;hello&quot;</span></span></code></pre></div><hr><h3 id="lstrip-chars-rstrip-chars" tabindex="-1"><code>lstrip([chars])</code> / <code>rstrip([chars])</code> <a class="header-anchor" href="#lstrip-chars-rstrip-chars" aria-label="Permalink to &quot;`lstrip([chars])` / `rstrip([chars])`&quot;">​</a></h3><p><strong>描述</strong>: 去除左端/右端的指定字符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;  hello  &quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.lstrip())           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;hello  &quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;**hello**&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.rstrip(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;**hello&quot;</span></span></code></pre></div><hr><h3 id="encode-encoding-utf-8-errors-strict" tabindex="-1"><code>encode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)</code> <a class="header-anchor" href="#encode-encoding-utf-8-errors-strict" aria-label="Permalink to &quot;`encode(encoding=&#39;utf-8&#39;, errors=&#39;strict&#39;)`&quot;">​</a></h3><p><strong>描述</strong>: 将字符串编码为字节。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.encode())           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: b&#39;hello&#39;</span></span></code></pre></div><hr><h3 id="expandtabs-tabsize-8" tabindex="-1"><code>expandtabs(tabsize=8)</code> <a class="header-anchor" href="#expandtabs-tabsize-8" aria-label="Permalink to &quot;`expandtabs(tabsize=8)`&quot;">​</a></h3><p><strong>描述</strong>: 将制表符 <code>\\t</code> 替换为空格。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.expandtabs(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: &quot;a   b&quot;</span></span></code></pre></div><hr><h3 id="translate-table" tabindex="-1"><code>translate(table)</code> <a class="header-anchor" href="#translate-table" aria-label="Permalink to &quot;`translate(table)`&quot;">​</a></h3><p><strong>描述</strong>: 根据转换表（通常由 <code>str.maketrans</code> 生成）替换字符。<br><strong>示例</strong>:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">trans_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.maketrans(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aeiou&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;12345&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello world&quot;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s.translate(trans_table))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: h2ll4 w4rld</span></span></code></pre></div><hr>',155)]))}const c=i(h,[["render",e]]);export{g as __pageData,c as default};
