import{_ as d,c as e,o,ag as c}from"./chunks/framework.Qw_rGEbp.js";const b=JSON.parse('{"title":"序列","description":"","frontmatter":{},"headers":[],"relativePath":"Toolchain/Python/sequence.md","filePath":"Toolchain/Python/sequence.md"}'),a={name:"Toolchain/Python/sequence.md"};function r(n,t,h,l,s,i){return o(),e("div",null,t[0]||(t[0]=[c('<h1 id="序列" tabindex="-1">序列 <a class="header-anchor" href="#序列" aria-label="Permalink to &quot;序列&quot;">​</a></h1><p><strong>序列（Sequence）</strong> 是指一种有序的、可以索引的数据结构，其中的元素按照一定的顺序排列，并且可以通过索引（下标）来访问。Python 中的序列类型包括以下几种：</p><ol><li><p><strong>字符串（str）</strong>：<br> 字符串是由字符组成的序列，例如 <code>&quot;hello&quot;</code>。</p></li><li><p><strong>列表（list）</strong>：<br> 列表是由任意类型的元素组成的可变序列，例如 <code>[1, 2, 3, 4]</code>。</p></li><li><p><strong>元组（tuple）</strong>：<br> 元组是由任意类型的元素组成的不可变序列，例如 <code>(1, 2, 3, 4)</code>。</p></li></ol><h2 id="内置函数" tabindex="-1">内置函数 <a class="header-anchor" href="#内置函数" aria-label="Permalink to &quot;内置函数&quot;">​</a></h2><p>Python 中的序列（如字符串、列表、元组等）可以使用 Python 的<strong>内置函数</strong>和<strong>序列特有的方法</strong>。这些函数和方法是 Python 标准库的一部分，直接集成在 Python 解释器中，无需额外导入模块即可使用。<strong>序列特有的方法</strong>请在对应的序列章节查看。</p><h3 id="数学计算" tabindex="-1">数学计算 <a class="header-anchor" href="#数学计算" aria-label="Permalink to &quot;数学计算&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>作用</th><th>示例</th><th>输出</th></tr></thead><tbody><tr><td><code>abs(x)</code></td><td>返回绝对值</td><td><code>abs(-3.14)</code></td><td><code>3.14</code></td></tr><tr><td><code>sum(iterable)</code></td><td>求和</td><td><code>sum([1, 2, 3])</code></td><td><code>6</code></td></tr><tr><td><code>max(iterable)</code></td><td>返回最大值</td><td><code>max([5, 2, 8])</code></td><td><code>8</code></td></tr><tr><td><code>min(iterable)</code></td><td>返回最小值</td><td><code>min(&quot;apple&quot;)</code></td><td><code>&#39;a&#39;</code></td></tr><tr><td><code>round(x, n)</code></td><td>四舍五入到 <code>n</code> 位小数</td><td><code>round(3.14159, 2)</code></td><td><code>3.14</code></td></tr><tr><td><code>pow(x, y)</code></td><td>返回 <code>x</code> 的 <code>y</code> 次方</td><td><code>pow(2, 3)</code></td><td><code>8</code></td></tr></tbody></table><hr><h3 id="迭代与函数式编程" tabindex="-1">迭代与函数式编程 <a class="header-anchor" href="#迭代与函数式编程" aria-label="Permalink to &quot;迭代与函数式编程&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>作用</th><th>示例</th><th>输出</th></tr></thead><tbody><tr><td><code>range(start, stop, step)</code></td><td>生成整数序列</td><td><code>list(range(1, 5))</code></td><td><code>[1, 2, 3, 4]</code></td></tr><tr><td><code>enumerate(iterable)</code></td><td>返回索引-元素对</td><td><code>list(enumerate(&quot;ab&quot;))</code></td><td><code>[(0, &#39;a&#39;), (1, &#39;b&#39;)]</code></td></tr><tr><td><code>map(func, iterable)</code></td><td>对每个元素应用函数</td><td><code>list(map(str.upper, [&quot;a&quot;, &quot;b&quot;]))</code></td><td><code>[&#39;A&#39;, &#39;B&#39;]</code></td></tr><tr><td><code>filter(func, iterable)</code></td><td>过滤满足条件的元素</td><td><code>list(filter(lambda x: x&gt;2, [1, 3, 2]))</code></td><td><code>[3]</code></td></tr><tr><td><code>zip(*iterables)</code></td><td>将多个可迭代对象元素配对</td><td><code>list(zip([1, 2], [&quot;a&quot;, &quot;b&quot;]))</code></td><td><code>[(1, &#39;a&#39;), (2, &#39;b&#39;)]</code></td></tr></tbody></table><hr><h3 id="对象操作" tabindex="-1">对象操作 <a class="header-anchor" href="#对象操作" aria-label="Permalink to &quot;对象操作&quot;">​</a></h3><table tabindex="0"><thead><tr><th>函数</th><th>作用</th><th>示例</th><th>输出</th></tr></thead><tbody><tr><td><code>len(obj)</code></td><td>返回对象长度</td><td><code>len(&quot;hello&quot;)</code></td><td><code>5</code></td></tr><tr><td><code>type(obj)</code></td><td>返回对象类型</td><td><code>type(3.14)</code></td><td><code>&lt;class &#39;float&#39;&gt;</code></td></tr><tr><td><code>isinstance(obj, class)</code></td><td>检查对象是否属于某类</td><td><code>isinstance(&quot;a&quot;, str)</code></td><td><code>True</code></td></tr><tr><td><code>id(obj)</code></td><td>返回对象内存地址</td><td><code>id([])</code></td><td>唯一标识符</td></tr><tr><td><code>hash(obj)</code></td><td>返回对象的哈希值（不可变对象）</td><td><code>hash(&quot;abc&quot;)</code></td><td>整数哈希值</td></tr></tbody></table>',13)]))}const p=d(a,[["render",r]]);export{b as __pageData,p as default};
