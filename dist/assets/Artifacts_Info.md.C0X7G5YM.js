import{_ as r,c as o,o as n,ag as s}from"./chunks/framework.Qw_rGEbp.js";const f=JSON.parse('{"title":"文档标准规范","description":"","frontmatter":{},"headers":[],"relativePath":"Artifacts/Info.md","filePath":"Artifacts/Info.md"}'),l={name:"Artifacts/Info.md"};function i(a,t,e,g,_,c){return n(),o("div",null,t[0]||(t[0]=[s('<h1 id="文档标准规范" tabindex="-1">文档标准规范 <a class="header-anchor" href="#文档标准规范" aria-label="Permalink to &quot;文档标准规范&quot;">​</a></h1><p>产品技术文档写作的目的是<strong>帮助用户正确地使用我们的产品</strong>，告诉用户<strong>产品或技术是什么</strong>，<strong>能做什么</strong>以及<strong>怎么做</strong>。因此，通常文档会在公司网站的在线帮助、帮助、或支持中。</p><p>文档写作时应以产品为准，与产品保持一致，内容具有如下特征：</p><ul><li><strong>完整性</strong>：内容全面，让读者/用户快速找到答案。</li><li><strong>一致性</strong>：包括： <ul><li>内容前后一致。</li><li>用词一致，比如物体的名称、参数的名称。应尽量避免同一个对象使用多个名称的情况。如果一个对象有多个名称，那么需要在文档前面声明，例如，北京XXXX有限公司（简称“XX”）。</li><li>文档版本跟产品版本保持一致，文档要及时定期更新。</li></ul></li><li><strong>可读性</strong>：语言简洁，易于理解，不能有歧义。用不同形式（例如<strong>图、表、目录、索引页、视频</strong>等）来增强可读性。 <ul><li>文档结构上，通过结构化的文档可以提高文档的可读性，也就是将文档的<strong>结构风格统一</strong>，使用户熟悉文档的整体结构，培养用户的习惯，达到用户养成的效果。</li><li>文档内容上，语言要简洁，易于理解，不要有冗余的信息，要懂得取舍。取：用户必须知道的信息，没有这个信息就不能正确地使用产品、不能正常运行、不能实现用户的需求。舍：简述通用的、非产品本身的信息，例如，标准、协议、编程语言等。文档中，我们只说明我们用了它（比如某种语言），或者我们符合什么协议/标准，介绍怎么用的就可以了。</li><li>文档逻辑上，要根据依赖关系来调整先后顺序。如果在逻辑上两个章节有依赖关系的话，要保证先后顺序是正确的。另外，两个章节如果关系比较紧密，但不分先后，则需要用添加链接、 索引页等形式来将信息关联起来。</li></ul></li><li><strong>正确性</strong>：文档内容必须是正确的，否则会给用户在使用产品时造成挫败感，最终导致用户流失。文档也是一种产品，使用文档的体验就是用户体验。正确的文档内容可以构建用户的信心，提高产品忠诚度。不正确的信息不如不写。因为错误的信息会给用户造成干扰，用户并不熟悉我们的产品，他们无法分辨哪些是正确的，哪些是错误的。信息正确与否，需要我们去测试验证。如果是引用的信息，要注明信息来源的链接，也可以将链接放在参考文献章节中。</li></ul><p>明确文档的写作特征后，需要进一步明确<strong>文档受众</strong>，遵循<strong>面向用户写作</strong>的原则，针对不同用户组织技术文档的写作。比如面向普通用户、开发人员、实施人员、维护人员等，要针对不同的用户角色从不同的角度写作。</p>',5)]))}const d=r(l,[["render",i]]);export{f as __pageData,d as default};
