import{_ as i,c as a,o as t,ag as h}from"./chunks/framework.Qw_rGEbp.js";const E=JSON.parse('{"title":"路径读取","description":"","frontmatter":{},"headers":[],"relativePath":"Toolchain/Python/path.md","filePath":"Toolchain/Python/path.md"}'),n={name:"Toolchain/Python/path.md"};function e(l,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[h(`<h1 id="路径读取" tabindex="-1">路径读取 <a class="header-anchor" href="#路径读取" aria-label="Permalink to &quot;路径读取&quot;">​</a></h1><h2 id="pathlib-path-path" tabindex="-1"><code>pathlib.Path(path)</code> <a class="header-anchor" href="#pathlib-path-path" aria-label="Permalink to &quot;\`pathlib.Path(path)\`&quot;">​</a></h2><p><strong>描述</strong>：面向对象的文件系统路径处理核心类，支持跨平台路径操作与文件管理。</p><h2 id="path-pathsegments" tabindex="-1"><code>Path(*pathsegments)</code> <a class="header-anchor" href="#path-pathsegments" aria-label="Permalink to &quot;\`Path(*pathsegments)\`&quot;">​</a></h2><p><strong>描述</strong>： 路径对象创建</p><p><strong>参数</strong>：</p><ul><li><code>*pathsegments</code>：字符串或路径对象，支持多参数拼接（如<code>Path(&#39;a&#39;, &#39;b&#39;)</code>等效于<code>a/b</code>）</li></ul><p><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pathlib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 基础创建方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;folder/file.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 相对路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p1)                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: folder/file.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/usr/local/bin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 绝对路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p2)                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: /usr/local/bin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path.home() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Documents&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 用户目录拼接</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p3)                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: /home/user/Documents（假设用户目录为/home/user）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path.cwd().parent                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取上级目录</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p4)                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: /current/workdir的上级目录（具体路径取决于当前工作目录）</span></span></code></pre></div><h2 id="路径属性获取" tabindex="-1">路径属性获取 <a class="header-anchor" href="#路径属性获取" aria-label="Permalink to &quot;路径属性获取&quot;">​</a></h2><table tabindex="0"><thead><tr><th>属性/方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>.name</code></td><td>含扩展名的文件名</td><td><code>Path(&#39;a/b.txt&#39;).name</code> → <code>&#39;b.txt&#39;</code></td></tr><tr><td><code>.stem</code></td><td>不含扩展名的文件名</td><td><code>Path(&#39;a/b.tar.gz&#39;).stem</code> → <code>&#39;b.tar&#39;</code></td></tr><tr><td><code>.suffix</code></td><td>最后一个扩展名</td><td><code>Path(&#39;a/b.tar.gz&#39;).suffix</code> → <code>&#39;.gz&#39;</code></td></tr><tr><td><code>.suffixes</code></td><td>全部扩展名列表</td><td><code>Path(&#39;a/b.tar.gz&#39;).suffixes</code> → <code>[&#39;.tar&#39;, &#39;.gz&#39;]</code></td></tr><tr><td><code>.parent</code></td><td>父目录路径对象</td><td><code>Path(&#39;a/b/c.txt&#39;).parent</code> → <code>a/b</code>（打印输出为<code>a/b</code>）</td></tr><tr><td><code>.parts</code></td><td>路径分解为元组</td><td><code>Path(&#39;/a/b/c&#39;).parts</code> → <code>(&#39;/&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;)</code></td></tr><tr><td><code>.absolute()</code></td><td>返回绝对路径对象</td><td><code>Path(&#39;.&#39;).absolute()</code> → <code>/current/workdir</code>（具体路径取决于当前工作目录）</td></tr></tbody></table><h2 id="路径拼接" tabindex="-1">路径拼接 <code>/</code> <a class="header-anchor" href="#路径拼接" aria-label="Permalink to &quot;路径拼接 \`/\`&quot;">​</a></h2><p><strong>描述</strong>：使用除法运算符实现跨平台路径拼接<br><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">config_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;config&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;settings.json&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config_path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: project/config/settings.json（自动处理OS差异）</span></span></code></pre></div><h2 id="joinpath-other" tabindex="-1"><code>joinpath(*other)</code> <a class="header-anchor" href="#joinpath-other" aria-label="Permalink to &quot;\`joinpath(*other)\`&quot;">​</a></h2><p><strong>参数</strong>：</p><ul><li><code>*other</code>：多个路径片段<br><strong>示例</strong>：</li></ul><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).joinpath(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: a/b/c</span></span></code></pre></div><h2 id="resolve-strict-false" tabindex="-1"><code>resolve(strict=False)</code> <a class="header-anchor" href="#resolve-strict-false" aria-label="Permalink to &quot;\`resolve(strict=False)\`&quot;">​</a></h2><p><strong>描述</strong>：解析符号链接并处理<code>.</code>/<code>..</code>，返回绝对路径<br><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resolved_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;scripts/../data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).resolve()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolved_path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: /absolute/path/data（具体路径取决于当前工作目录）</span></span></code></pre></div><h2 id="文件检查" tabindex="-1">文件检查 <a class="header-anchor" href="#文件检查" aria-label="Permalink to &quot;文件检查&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>.exists()</code></td><td>路径是否存在</td><td><code>print(Path(&#39;a.txt&#39;).exists())</code> → <code>True</code>（假设文件存在）</td></tr><tr><td><code>.is_file()</code></td><td>是否是文件</td><td><code>print(Path(&#39;b.jpg&#39;).is_file())</code> → <code>True</code></td></tr><tr><td><code>.is_dir()</code></td><td>是否是目录</td><td><code>print(Path(&#39;docs&#39;).is_dir())</code> → <code>True</code></td></tr></tbody></table><h2 id="文件读写" tabindex="-1">文件读写 <a class="header-anchor" href="#文件读写" aria-label="Permalink to &quot;文件读写&quot;">​</a></h2><table tabindex="0"><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>.read_text(encoding=None)</code></td><td>读取文本内容</td><td><code>content = Path(&#39;note.txt&#39;).read_text()</code><br><code>print(content)</code> → <code>&#39;Hello, World!&#39;</code></td></tr><tr><td><code>.write_text(data, encoding=None)</code></td><td>写入文本文件</td><td><code>Path(&#39;log.txt&#39;).write_text(&#39;新内容&#39;)</code><br>执行后文件内容变为“新内容”</td></tr><tr><td><code>.read_bytes()</code></td><td>读取二进制内容</td><td><code>data = Path(&#39;img.jpg&#39;).read_bytes()</code><br><code>print(len(data))</code> → <code>10240</code>（假设文件大小为10KB）</td></tr><tr><td><code>.write_bytes(data)</code></td><td>写入二进制文件</td><td><code>Path(&#39;data.bin&#39;).write_bytes(b&#39;\\x00\\xFF&#39;)</code><br>执行后文件包含字节<code>0x00</code>和<code>0xFF</code></td></tr></tbody></table><h2 id="目录管理" tabindex="-1">目录管理 <a class="header-anchor" href="#目录管理" aria-label="Permalink to &quot;目录管理&quot;">​</a></h2><p><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建目录（支持递归创建）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new/project&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).mkdir(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">exist_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目录结构 new/project 被创建</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除空目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;empty_dir&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).rmdir()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 目录必须为空否则报错</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 删除文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;temp.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).unlink(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">missing_ok</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件被删除，若文件不存在不报错</span></span></code></pre></div><h2 id="目录遍历与匹配" tabindex="-1">目录遍历与匹配 <a class="header-anchor" href="#目录遍历与匹配" aria-label="Permalink to &quot;目录遍历与匹配&quot;">​</a></h2><h3 id="iterdir" tabindex="-1"><code>iterdir()</code> <a class="header-anchor" href="#iterdir" aria-label="Permalink to &quot;\`iterdir()\`&quot;">​</a></h3><p><strong>描述</strong>：生成目录下的所有条目<br><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).iterdir():</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DIR&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.is_dir() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;FILE&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> → </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例输出:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DIR → folder1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># FILE → file1.txt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># DIR → subdir</span></span></code></pre></div><h3 id="glob-pattern" tabindex="-1"><code>glob(pattern)</code> <a class="header-anchor" href="#glob-pattern" aria-label="Permalink to &quot;\`glob(pattern)\`&quot;">​</a></h3><p><strong>参数</strong>：</p><ul><li><code>pattern</code>：Unix风格通配符模式<br><strong>示例</strong>：</li></ul><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查找当前目录所有.py文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">py_files </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;src&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).glob(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*.py&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(py_files)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [PosixPath(&#39;src/main.py&#39;), PosixPath(&#39;src/utils.py&#39;)]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 递归查找所有.md文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">md_files </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;docs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).rglob(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;**/*.md&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(md_files)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: [PosixPath(&#39;docs/ch1.md&#39;), PosixPath(&#39;docs/notes/ch2.md&#39;)]</span></span></code></pre></div><h2 id="路径修改" tabindex="-1">路径修改 <a class="header-anchor" href="#路径修改" aria-label="Permalink to &quot;路径修改&quot;">​</a></h2><p><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改文件名（保留路径）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;old.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).with_name(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;new.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: new.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 修改扩展名</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">new_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data.csv&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).with_suffix(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.xlsx&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(new_path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: data.xlsx</span></span></code></pre></div><h2 id="相对路径计算" tabindex="-1">相对路径计算 <a class="header-anchor" href="#相对路径计算" aria-label="Permalink to &quot;相对路径计算&quot;">​</a></h2><p><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rel_path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/a/b/c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).relative_to(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rel_path)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 输出: b/c</span></span></code></pre></div><h2 id="文件元数据" tabindex="-1">文件元数据 <a class="header-anchor" href="#文件元数据" aria-label="Permalink to &quot;文件元数据&quot;">​</a></h2><p><strong>示例</strong>：</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).stat()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;大小: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stat.st_size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes, 修改时间: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stat.st_mtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 示例输出: 大小: 1024 bytes, 修改时间: 1620000000.0（具体数值取决于文件实际属性）</span></span></code></pre></div>`,45)]))}const c=i(n,[["render",e]]);export{E as __pageData,c as default};
